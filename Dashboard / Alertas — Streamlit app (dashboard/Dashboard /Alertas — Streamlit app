import streamlit as st
import sqlite3
import pandas as pd
from pathlib import Path
import joblib
import numpy as np

DB = Path(__file__).parent.parent / "db" / "sensors.db"
MODEL = Path(__file__).parent.parent / "ml" / "model.pkl"

st.set_page_config(page_title="Dashboard - Hermes Reply MVP", layout="wide")
st.title("Hermes Reply — MVP Pipeline")

# Load data
conn = sqlite3.connect(DB)
df_snap = pd.read_sql_query("SELECT * FROM sensor_feature_snapshots ORDER BY snapshot_ts DESC LIMIT 500", conn, parse_dates=['snapshot_ts'])
conn.close()

st.subheader("KPIs")
col1, col2, col3 = st.columns(3)
if not df_snap.empty:
    col1.metric("Última Temp (C)", f"{df_snap.iloc[0]['temp_c']:.2f}")
    col2.metric("Média Temp (últ. 100)", f"{df_snap['temp_c'].rolling(100,min_periods=1).mean().iloc[-1]:.2f}")
    col3.metric("Nº Registros", len(df_snap))
else:
    col1.write("Sem dados")

st.subheader("Score do Modelo")
if MODEL.exists():
    model = joblib.load(MODEL)
    # inferir nos últimos N snapshots
    features = ['temp_c','pressure_bar','vibration_rms','humidity_pct','current_a','equipment_id','location_id']
    X = df_snap[features].fillna(0)
    if len(X)>0:
        preds = model.predict(X)
        # mostrar % de anomalia previsto
        anomaly_rate = np.mean(preds)
        st.metric("Anomalia prevista (últ. N)", f"{anomaly_rate*100:.2f}%")
    else:
        st.write("Sem features para inferir")
else:
    st.write("Modelo não encontrado. Rode ml/train_infer.py")

st.subheader("Gráfico de Séries")
if not df_snap.empty:
    st.line_chart(df_snap[['snapshot_ts','temp_c']].set_index('snapshot_ts')['temp_c'])
else:
    st.write("Sem dados para plot")

# ALERTA por threshold
st.subheader("Alertas (threshold)")
threshold = st.number_input("Temperatura limite (°C)", value=80.0, step=0.5)
if not df_snap.empty:
    recent = df_snap[df_snap['temp_c'] > threshold]
    if not recent.empty:
        st.error(f"ALERTA: {len(recent)} leituras acima de {threshold}°C — ver tabela")
        st.dataframe(recent[['snapshot_ts','equipment_id','temp_c']])
    else:
        st.success("Nenhuma leitura acima do threshold")
else:
    st.write("Sem dados")

st.markdown("---")
st.write("Logs / Evidências")
st.write("Para gerar evidências: 1) rodar ingest server com ESP32 enviando; 2) popular snapshots; 3) rodar ML; 4) abrir o dashboard.")
